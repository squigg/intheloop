/**
 * Blue Bank Plus
 * Blue Bank API with expanded capability for posting receipts and transaction meta data.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace API.Client {
    'use strict';

    export class DefaultApi {
        protected basePath = 'https://bluebank.azure-api.net/api/v0.6.3';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * 
         * &lt;p&gt;This method can be used to request a payment to be made from the  account specified in the &#39;id&#39; path parameter (source account) to another bank account (target account) that is specified in the message body.&lt;p&gt;Note the relationship between payments and transactions - each account has a collection of payments and a collection of transactions. To make a payment, you make a post to the payments collection to create a new payment request object. This object can be checked to see the progress of the payment through its own lifecycle.&lt;/p&gt;&lt;p&gt;If (and only if) that payment is successful, you will see a corresponding debit entry in the transactions list to indicate that the payment has settled and the money has actually moved.&lt;/p&gt;&lt;h6&gt;Types of payment&lt;/h6&gt;&lt;p&gt;The following payment types are possible in this release:&lt;ul&gt;&lt;li&gt;&lt;b&gt;Transfers&lt;/b&gt; - if the destination account is owned by the same person who owns the source account, then this is a transfer. You must specify the target account with a sortcode/account number pair. On completion of the payment, a debit transaction will appear in the source account and a credit transaction will appear in the destination account.&lt;/li&gt;&lt;li&gt;&lt;b&gt;UK Faster Payments&lt;/b&gt; - if the destination is to another valid account with sortcode 839999, then this will be done as a (simulated) UK Faster Payment between two parties. You must specify the target account with  a sortcode/account number pair. On completion of the payment, a debit transaction will appear in the source account and a credit transaction will appear in the destination account.&lt;br/&gt;If the destination is to any sortcode other than 839999, then we will simulate an outbound payment to another institution by adding a debit transaction to the source account and by creating a General Ledger entry for our simulated bank that records the outward flow of this money. &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Note that you do not have to do anything to specify the payment type in your request: we determine whether a payment is a transfer, an internal payment or a UK payment based upon the target account that you specify.&lt;/p&gt;&lt;h6&gt;Payment status&lt;/h6&gt;&lt;p&gt;There are two modes of operation provided which allow the status of a payment request to be checked:&lt;ul&gt;&lt;li&gt;&lt;b&gt;Push&lt;/b&gt; - the caller provides a callback uri when making the payment and we call that uri with payment status update messages&lt;/li&gt;&lt;li&gt;&lt;b&gt;Polling&lt;/b&gt; - if a callback uri is not specified, then we provide a statusUri in the response body which can be periodically called by the client application to check on payment status.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Note that in a future release, there will potentially be a separate transaction covering any fees resulting from the payment and this will include a linking mechanism to allow a tie between the charge and the payment transaction for which the charge is levied to be easily determined&lt;/p&gt;&lt;h6&gt;Two Factor Authentication (2FA)&lt;/h6&gt;&lt;p&gt;Incoming European regulations (Payment Services Directive 2) will mandate the implementation of two-factor authentication for payments above a certain ceiling and we have modelled this from v0.6.x of this API.&lt;/p&gt;&lt;p&gt;If you make a payment below the 2FA &#39;ceiling&#39; of ï¿½30, then this is a single-stage process (provided that you have specified the payment object properly). Once you POST the payment object, it&#39;s paymentStatus will immediately be set to &lt;code&gt;&#39;paymentStatus&#39;:&#39;Pending&#39;&lt;/code&gt;. You will receive a 200 status code, which is your notification that the payment is queued for processing. Under most circumstances, the payment will be picked up by our Payments Engine for processing within a few seconds&lt;/p&gt;&lt;p&gt;If you make a payment above the 2FA &#39;ceiling&#39;, then this is a two-stage process. Your paymentStatus will be set to an initial state of &lt;code&gt;&#39;paymentStatus&#39;:&#39;2FA required&#39;&lt;/code&gt; and you will receive a 401 status code.&lt;p&gt;This is your signal to prompt the user of your app to enter the 6-digit One Time Password (OTP) that we will send to their registered mobile number - see the PATCH Customer documentation to set this value.&lt;/p&gt;&lt;p&gt;Once the user has provided the OTP code, you must PATCH the payment object. This is the second and final stage of the 2FA payment process. Patching the object with the correct OTP will set the &lt;code&gt;&#39;paymentStatus&#39;:&#39;Pending&#39;&lt;/code&gt; and will initiate processing by our Payments Engine.&lt;/p&gt;&lt;p style&#x3D;\&quot;color:red;\&quot;&gt;&lt;b&gt;NOTE: At our India Hackathons, the SMS message will not be generated and the bypass-code \&quot;123456\&quot; should be used to PATCH the request.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id The id to make a payment from
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param paymentRequest 
         */
        public createAccountPayment (id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, paymentRequest?: PaymentRequest, extraHttpRequestParams?: any ) : ng.IHttpPromise<Payment> {
            const localVarPath = this.basePath + '/accounts/{id}/payments'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling createAccountPayment.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: paymentRequest,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Add meta data to a transaction
         * @param id The transaction id to add the meta data to
         * @param ocpApimSubscriptionKey subscription key in header
         * @param meta 
         */
        public createTransactionMeta (id: string, ocpApimSubscriptionKey?: string, meta?: TransactionMeta, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionMeta> {
            const localVarPath = this.basePath + '/transactions/{id}/meta'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling createTransactionMeta.');
            }
            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: meta,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Add meta data to a transaction
         * @param id The transaction id to add the image meta data to
         * @param image File to be uploaded
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public createTransactionMetaImage (id: string, image: any, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionMeta> {
            const localVarPath = this.basePath + '/transactions/{id}/meta/image'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let formParams: any = {};

            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling createTransactionMetaImage.');
            }
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new Error('Required parameter image was null or undefined when calling createTransactionMetaImage.');
            }
            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

            formParams['image'] = image;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: false,
                                data: this.$httpParamSerializer(formParams),
                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Add a receipt to a transaction
         * @param id The transaction id to add the receipt to
         * @param ocpApimSubscriptionKey subscription key in header
         * @param receipt 
         */
        public createTransactionReceipt (id: string, ocpApimSubscriptionKey?: string, receipt?: TransactionReceipt, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionReceipt> {
            const localVarPath = this.basePath + '/transactions/{id}/receipt'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling createTransactionReceipt.');
            }
            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: true,
                data: receipt,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * &lt;p&gt;This returns a full Account object for the given id - this provides more fields than the Summary Account object provided by the &lt;code&gt;/customer/{id}/accounts&lt;/code&gt; endpoint and also provides access to the &lt;code&gt;/accounts/{id}/transactions&lt;/code&gt; and the &lt;code&gt;/accounts/{id}/payments&lt;/code&gt; resources.&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;i&gt;Note:&lt;/b&gt; By design, and in a departure from common REST practice, there is no &lt;code&gt;/accounts&lt;/code&gt; top-level endpoint in this API. This is because (in delegation scenarios) the collection of objects which would be returned would potentially include accounts belonging to more than one Customer.&lt;/p&gt;&lt;p&gt;If you want to enumerate all accounts for a Customer, you should first enumerate AccountSummary objects by calling &lt;code&gt;/customers/{id}/accounts&lt;/code&gt; and then call this API for each id to return the full Account objects.&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id The id to return
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getAccount (id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Account> {
            const localVarPath = this.basePath + '/accounts/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAccount.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * &lt;p&gt;In the case where the client does not provide a callbackUri for us to send push status updates you can instead directly query the paymentId to check the status of the payment.&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param paymentId the unique paymentId for the payment to be checked
         * @param id The id to make the payment from
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getAccountPayment (paymentId: string, id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Payment> {
            const localVarPath = this.basePath + '/accounts/{id}/payments/{paymentId}'
                .replace('{' + 'paymentId' + '}', String(paymentId))
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new Error('Required parameter paymentId was null or undefined when calling getAccountPayment.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAccountPayment.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * &lt;p&gt;We maintain a collection of all currently &#39;in progress&#39; payments plus 28 days of &#39;completed&#39; payments.&lt;/p&gt;&lt;h5&gt;offset option&lt;/h5&gt;&lt;p&gt;The offset option is the zero-based index of the first record that you would like to receive. The default is 0.&lt;/p&gt;&lt;h5&gt;limit option&lt;/h5&gt;&lt;p&gt;The limit option is the maximum number of records that you would like to be returned. The default is 50.&lt;/p&gt;&lt;h5&gt;sortOrder option&lt;/h5&gt;&lt;p&gt;The sortOrder option is a comma-separated list of fields used to specify one or more levels of sorting of the returned  collection. To specify a reverse-sort, add a &#39;-&#39; sign to the field name.&lt;/p&gt;&lt;h5&gt;fields option&lt;/h5&gt;&lt;p&gt;The fields option allows you to request a partial set of fields to be returned, rather than the entire obect. The fields option expects a comma-separated list of field names from the returned object schema.&lt;/p&gt;&lt;h5&gt;filter option&lt;/h5&gt;&lt;p&gt;The filter option may specify the following predicates:&lt;ul&gt;&lt;li&gt;&#39;gt&#39; for &#39;greater than&#39;&lt;/li&gt;&lt;li&gt;&#39;lt&#39; for &#39;less than&#39;&lt;/li&gt;&lt;li&gt;&#39;gte&#39; for &#39;greater than or equal to&#39;&lt;/li&gt;&lt;li&gt;&#39;lte&#39; for &#39;less than or equals to&#39;&lt;/li&gt;&lt;li&gt;&#39;eq&#39; for equals&lt;/li&gt;&lt;li&gt;&#39;ne&#39; for &#39;not equals&#39;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt; Note that if multiple filter queries are specified then they are logically AND&#39;ed together.&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id The id object from which fund will be debited
         * @param limit The number of records to return in this request
         * @param offset The index (in the overall result set) of the first record to return in this request
         * @param sortOrder The (comma-separated, list of) sort field(s) to apply to this result set. Prefix with &#39;-&#39; to reverse sort
         * @param fields The list of fields to return if a partial result is desired (default is to return all fields)
         * @param filter Filter the returned list of transactions for {id}, returning only those which match the filter string
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getAccountPayments (id: string, limit?: string, offset?: string, sortOrder?: string, fields?: string, filter?: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<PaymentArray> {
            const localVarPath = this.basePath + '/accounts/{id}/payments'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAccountPayments.');
            }
            if (limit !== undefined) {
                queryParameters['limit'] = limit;
            }

            if (offset !== undefined) {
                queryParameters['offset'] = offset;
            }

            if (sortOrder !== undefined) {
                queryParameters['sortOrder'] = sortOrder;
            }

            if (fields !== undefined) {
                queryParameters['fields'] = fields;
            }

            if (filter !== undefined) {
                queryParameters['filter'] = filter;
            }

            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * &lt;p&gt;Query string parameters can be used to sort by one or more fields, to paginate results, to request a partial set of fields to be returned and to filter the rows returned by using a filter string.&lt;/p&gt;&lt;h5&gt;offset option&lt;/h5&gt;&lt;p&gt;The offset option is the zero-based index of the first record that you would like to receive. The default is 0.&lt;/p&gt;&lt;h5&gt;limit option&lt;/h5&gt;&lt;p&gt;The limit option is the maximum number of records that you would like to be returned. The default is 50.&lt;/p&gt;&lt;h5&gt;sortOrder option&lt;/h5&gt;&lt;p&gt;The sortOrder option is a comma-separated list of fields used to specify one or more levels of sorting of the returned  collection. To specify a reverse-sort, add a &#39;-&#39; sign to the field name.&lt;/p&gt;&lt;h5&gt;fields option&lt;/h5&gt;&lt;p&gt;The fields option allows you to request a partial set of fields to be returned, rather than the entire obect. The fields option expects a comma-separated list of field names from the returned object schema.&lt;/p&gt;&lt;h5&gt;filter option&lt;/h5&gt;&lt;p&gt;The filter option may specify the following predicates:&lt;ul&gt;&lt;li&gt;&#39;gt&#39; for &#39;greater than&#39;&lt;/li&gt;&lt;li&gt;&#39;lt&#39; for &#39;less than&#39;&lt;/li&gt;&lt;li&gt;&#39;gte&#39; for &#39;greater than or equal to&#39;&lt;/li&gt;&lt;li&gt;&#39;lte&#39; for &#39;less than or equals to&#39;&lt;/li&gt;&lt;li&gt;&#39;eq&#39; for equals&lt;/li&gt;&lt;li&gt;&#39;ne&#39; for &#39;not equals&#39;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt; Note that if multiple filter queries are specified then they are logically AND&#39;ed together.&lt;/p&gt;&lt;h6&gt;Example 1&lt;/h6&gt;&lt;p&gt;To return all records for an account showing only the custom name and balance, sorted by the transaction date and time:&lt;/p&gt;&lt;p&gt;&lt;code&gt;/accounts/{id}/transactions?fields&#x3D;transactionDateTime,accountBalance&amp;sortOrder&#x3D;transactionDateTime&lt;/code&gt;&lt;/p&gt;&lt;h6&gt;Example 2&lt;/h6&gt;&lt;p&gt;To return the second page of 20 results for all records:&lt;/p&gt;&lt;p&gt;&lt;code&gt;/accounts/{id}/transactions?offset&#x3D;20&amp;limit&#x3D;20&lt;/code&gt;&lt;/p&gt;&lt;h6&gt;Example 3&lt;/h6&gt;&lt;p&gt;To return transactions greater than a particular value:&lt;/p&gt;&lt;p&gt;&lt;code&gt;/accounts/{id}/transactions?filter&#x3D;transactionAmount.gt.250&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;h6&gt;Example 4&lt;/h6&gt;&lt;/p&gt;&lt;p&gt;To perform a complex filter query, for example, all transactions before Jan 31st 2015 that have a transaction amount greater than 50:&lt;/p&gt;&lt;p&gt;&lt;code&gt;/accounts/{id}/transactions?filter&#x3D;transactionAmount.gt.50,transactionDate.lt.2015.01.31&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id The id to return transactions for
         * @param offset The index (in the overall result set) of the first record to return in this request
         * @param limit The number of records to return in this request
         * @param sortOrder The (comma-separated, list of) sort field(s) to apply to this result set. Prefix with &#39;-&#39; to reverse sort
         * @param fields The list of fields to return if a partial result is desired (default is to return all fields)
         * @param filter Filter the returned list of transactions for {id}, returning only those which match the filter string
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getAccountTransactions (id: string, offset?: string, limit?: string, sortOrder?: string, fields?: string, filter?: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionArray> {
            const localVarPath = this.basePath + '/accounts/{id}/transactions'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getAccountTransactions.');
            }
            if (offset !== undefined) {
                queryParameters['offset'] = offset;
            }

            if (limit !== undefined) {
                queryParameters['limit'] = limit;
            }

            if (sortOrder !== undefined) {
                queryParameters['sortOrder'] = sortOrder;
            }

            if (fields !== undefined) {
                queryParameters['fields'] = fields;
            }

            if (filter !== undefined) {
                queryParameters['filter'] = filter;
            }

            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Use this call to return a specific Customer object, if you know the id. For example, if you have stored a list of valid id&#39;s from a previous session, you can access Customer objects individually using this call.&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id description
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getCustomer (id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<Customer> {
            const localVarPath = this.basePath + '/customers/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCustomer.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Use this call to enumerate the list of accounts for the specified user. An id is your key into the &lt;code&gt;/accounts&lt;/code&gt; endpoint. &lt;p&gt;A collection of AccountSummary objects are returned. Full Account objects can be retrieved from the &lt;code&gt;/accounts/{id}&lt;/code&gt; endpoint.&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id description
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getCustomerAccounts (id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<AccountSummaryArray> {
            const localVarPath = this.basePath + '/customers/{id}/accounts'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCustomerAccounts.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * &lt;p&gt;This call will return a collection of Customer objects which the currently authenticated user is allowed to see. At present, the collection will return a single Customer object, but more complex scenarios in the future (e.g. delegation scenarios) could result in multiple objects being returned in the collection.&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public getCustomers (subscriptionKey?: string, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<CustomerArray> {
            const localVarPath = this.basePath + '/customers';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Get the meta data for a transaction
         * @param id The id of the transaction to get the meta data for
         */
        public getTransactionMeta (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionMeta> {
            const localVarPath = this.basePath + '/transactions/{id}/meta'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTransactionMeta.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Get the receipt for a transaction
         * @param id The id of the transaction to get the receipt for
         */
        public getTransactionReceipt (id: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionReceipt> {
            const localVarPath = this.basePath + '/transactions/{id}/receipt'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getTransactionReceipt.');
            }
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * By design, only the accountFriendlyName can be updated by API. Other fields are reserved by the Bank and any changes to them will be ignored.&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id The id to update
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param body 
         */
        public updateAccount (id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, body?: Body, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
            const localVarPath = this.basePath + '/accounts/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateAccount.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * &lt;p&gt;This method is used to provide the One Time Password (OTP) code which is required to authorise a payment greater than the 2FA ceiling of Â£30.&lt;/p&gt;&lt;p&gt;In order to authorise the payment, you must PATCH the OTPCode attribute of the Payment object by passing a body in this form:&lt;/p&gt;&lt;p&gt;&lt;code&gt;{&#39;OTPCode&#39;:&#39;xxxxxx}&lt;/code&gt;&lt;/p&gt;&lt;p style&#x3D;\&quot;color:red;\&quot;&gt;&lt;b&gt;NOTE: At our India Hackathons, the SMS message will not be generated and the bypass-code \&quot;123456\&quot; should be used to PATCH the request.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id The account ID which the desired payment belongs to
         * @param paymentId The id of the Payment to be authorised
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param patchPayment 
         */
        public updateAccountPayment (id: string, paymentId: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, patchPayment?: PatchPayment, extraHttpRequestParams?: any ) : ng.IHttpPromise<Payment> {
            const localVarPath = this.basePath + '/accounts/{id}/payments/{paymentId}'
                .replace('{' + 'id' + '}', String(id))
                .replace('{' + 'paymentId' + '}', String(paymentId));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateAccountPayment.');
            }
            // verify required parameter 'paymentId' is not null or undefined
            if (paymentId === null || paymentId === undefined) {
                throw new Error('Required parameter paymentId was null or undefined when calling updateAccountPayment.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: patchPayment,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Use this call to update a specific Customer object, if you know the id. At present, the only property which it is possible to update is &#39;mobilePhone&#39;.&lt;/p&gt;&lt;p&gt;This operation is enabled to allow Second Factor Authentication scenarios for Payments. In a future release, this feature will be available in a customer portal and this PATCH operation will be removed from the public API. &lt;p&gt;Required headers: &lt;b&gt;Ocp-Apim-Subscription-Key&lt;/b&gt; &amp; &lt;b&gt;bearer&lt;/b&gt;&lt;/p&gt;
         * @param id description
         * @param subscriptionKey subscription key in url
         * @param ocpApimSubscriptionKey subscription key in header
         * @param body 
         */
        public updateCustomer (id: string, subscriptionKey?: string, ocpApimSubscriptionKey?: string, body?: Body, extraHttpRequestParams?: any ) : ng.IHttpPromise<Customer> {
            const localVarPath = this.basePath + '/customers/{id}'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateCustomer.');
            }
            if (subscriptionKey !== undefined) {
                queryParameters['subscription-key'] = subscriptionKey;
            }

            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: body,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Update meta data for a transaction
         * @param id The transaction id to update the meta data for
         * @param ocpApimSubscriptionKey subscription key in header
         * @param meta 
         */
        public updateTransactionMeta (id: string, ocpApimSubscriptionKey?: string, meta?: TransactionMeta, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionMeta> {
            const localVarPath = this.basePath + '/transactions/{id}/meta'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateTransactionMeta.');
            }
            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: true,
                data: meta,
                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Update meta data image for a transaction
         * @param id The transaction id to update the meta data for
         * @param image File to be uploaded
         * @param ocpApimSubscriptionKey subscription key in header
         */
        public updateTransactionMetaImage (id: string, image: any, ocpApimSubscriptionKey?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<TransactionMeta> {
            const localVarPath = this.basePath + '/transactions/{id}/meta/image'
                .replace('{' + 'id' + '}', String(id));

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let formParams: any = {};

            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateTransactionMetaImage.');
            }
            // verify required parameter 'image' is not null or undefined
            if (image === null || image === undefined) {
                throw new Error('Required parameter image was null or undefined when calling updateTransactionMetaImage.');
            }
            headerParams['Ocp-Apim-Subscription-Key'] = ocpApimSubscriptionKey;

            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

            formParams['image'] = image;

            let httpRequestParams: any = {
                method: 'PATCH',
                url: localVarPath,
                json: false,
                                data: this.$httpParamSerializer(formParams),
                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
